apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: {{ .Values.postgres_namespace }}
  labels:
    app: {{ .Values.postgres_name }}
data:
  postgresql.conf: |
    listen_addresses = '0.0.0.0'
    port = 5432
    max_connections = 200
    shared_buffers = 2GB
    work_mem = 64MB
    maintenance_work_mem = 1GB
    effective_cache_size = 6GB
    timezone = 'America/Guayaquil'
    authentication_timeout = 1min
    password_encryption = 'scram-sha-256'
    autovacuum = on
    autovacuum_vacuum_cost_limit = -1
    vacuum_cost_delay = 20ms
    random_page_cost = 1.1
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    effective_io_concurrency = 200
    lock_timeout = 1s
    wal_level = replica
    max_replication_slots = 4
    max_wal_senders = 5
    hot_standby = on
    log_checkpoints = on
    log_temp_files = 0  # Registra todos los archivos temporales
    pg_stat_statements.track = all
    log_directory = '/var/log/postgresql'  # Directorio de los logs
    log_filename = 'postgresql.log'        # Nombre del archivo de log
    log_statement = 'ddl' 
    log_duration = on
    client_encoding = 'UTF8'

    # Si deseas llamar al microservicio desde un servidor local
    # ssl = on
    # ssl_cert_file = '/etc/ssl/certs/postgresql.crt'
    # ssl_key_file = '/etc/ssl/private/postgresql.key'
    # ssl_ca_file = '/etc/ssl/certs/ca-certificates.crt'

  init: |
    -- Crear la tabla virtual_domains si no existe
    CREATE TABLE IF NOT EXISTS virtual_domains (
        id SERIAL PRIMARY KEY,
        domain VARCHAR(255) NOT NULL UNIQUE
    );

    -- Crear la tabla virtual_aliases si no existe
    CREATE TABLE IF NOT EXISTS virtual_aliases (
        id SERIAL PRIMARY KEY,
        domain_id INT NOT NULL,
        source VARCHAR(255) NOT NULL,
        destination VARCHAR(255) NOT NULL,
        FOREIGN KEY (domain_id) REFERENCES virtual_domains(id) ON DELETE CASCADE,
        -- Se podría agregar un índice en 'source' para mejorar la búsqueda
        CONSTRAINT unique_source UNIQUE (source, domain_id)  -- Esto garantiza que no haya alias duplicados por dominio
    );

    -- Crear la tabla virtual_users si no existe
    CREATE TABLE IF NOT EXISTS virtual_users (
        id SERIAL PRIMARY KEY,
        domain_id INT NOT NULL,
        password VARCHAR(106) NOT NULL,
        email VARCHAR(255) NOT NULL UNIQUE,
        FOREIGN KEY (domain_id) REFERENCES virtual_domains(id) ON DELETE CASCADE,
        -- Se puede agregar un índice para mejorar la búsqueda en la columna 'email'
        CONSTRAINT valid_email CHECK (email ~* '^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$')  -- Validación básica para correos
    );
