apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: postfix
  namespace: {{ .Values.NameSpaceCluster }}
  labels:
    app: postfix
spec:
  selector:
    matchLabels:
      app: postfix
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: postfix
    spec:
      serviceAccountName: postfix
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet

      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 1002            # Grupo vmail para /var/mailbox
        fsGroupChangePolicy: "Always"

      # Init container para corregir permisos en mailbox y crear estructura básica Maildir
      initContainers:
      - name: fix-mailbox-permissions
        image: busybox
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: mailbox
          mountPath: /var/mailbox
        command:
        - sh
        - -c
        - |
          echo "Fixing ownership and permissions on /var/mailbox"
          chown -R 1002:1002 /var/mailbox && echo "Ownership fixed" || echo "Failed to fix ownership"
          chmod -R 700 /var/mailbox && echo "Permissions fixed" || echo "Failed to fix permissions"

          # Crear estructura Maildir básica para support@smartquail.io si no existe
          MAILDIR="/var/mailbox/vhosts/smartquail.io/support/Maildir"
          if [ ! -d "$MAILDIR" ]; then
            echo "Creating Maildir structure for support@smartquail.io"
            mkdir -p "$MAILDIR"/{cur,new,tmp}
            chown -R 1002:1002 /var/mailbox/vhosts/smartquail.io/support
            chmod -R 700 /var/mailbox/vhosts/smartquail.io/support
            echo "Maildir structure created"
          else
            echo "Maildir structure already exists"
          fi

      containers:
        - name: postfix
          image: {{ .Values.postfiximage }}
          imagePullPolicy: IfNotPresent
          ports:
            - name: smtp
              containerPort: 25
              hostPort: 25
            - name: smtps
              containerPort: 465
            - name: submission
              containerPort: 587
          env:
            - name: DOMAIN
              valueFrom:
                secretKeyRef:
                  name: postfix-secrets
                  key: DOMAIN
            # (aquí incluir el resto de variables de entorno tal cual las tienes)
          livenessProbe:
            failureThreshold: 2
            tcpSocket:
              port: 25
            initialDelaySeconds: 10
            periodSeconds: 60
          readinessProbe:
            failureThreshold: 2
            tcpSocket:
              port: 25
            periodSeconds: 60
          resources:
            requests:
              cpu: "5m"
              memory: "16Mi"
            limits:
              cpu: "10m"
              memory: "32Mi"
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - DAC_OVERRIDE
                - FOWNER
                - SETUID
                - SETGID
                - NET_BIND_SERVICE
          volumeMounts:
            - name: mailbox
              mountPath: /var/mailbox
            - name: mail-certificates
              mountPath: /etc/ssl
              readOnly: true
            - name: postfix-config-volume
              mountPath: /etc/postfix/sql
              readOnly: true

      volumes:
        - name: mailbox
          persistentVolumeClaim:
            claimName: mailbox-pvc
        - name: mail-certificates
          projected:
            sources:
              - secret:
                  name: {{ .Values.tlsSecretName }}
                  items:
                    - key: tls.crt
                      path: tls.crt
                    - key: tls.key
                      path: tls.key
        - name: postfix-config-volume
          configMap:
            name: postfix-config
